package com.thevillage {	import flash.display.MovieClip;	import flash.geom.Point;	import com.thevillage.GameData;	import com.thevillage.TileSprite;	import com.thevillage.TileTypes;	import com.thevillage.Minion;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class Stonecutter extends Building	{				var stone:QuarryStone;		var currStone:QuarryStone;		var quarry:Quarry;				public function Stonecutter(type:int, grid:Array, id:int, _gameScreen:GameScreen, _quarry:Quarry) 		{			super(type, grid, id, _gameScreen);			resType = TileTypes.RESOURCE_STONE;			quarry = _quarry;		}				override public function initBuilding()		{			super.initBuilding();						// init stones			//initCrop(1, 0);						// init resource			resource = 0;						// set rally point			rally_col = col + 0;			rally_row = row + 1;						cache_col = col + 0;			cache_row = row + 0;		}					override public function drawItem()		{			super.drawItem();						// rally point art			var newSprite:TileSprite = new TileSprite(itemType, positionAvailable, true);			addChild(newSprite);						// first stone			//var stone_col:int = col+1;			//var stone_row:int = row;						/*						newSprite = new TileSprite(itemType, positionAvailable);			newSprite.x = GameData.TILE_SIZE;						addChild(newSprite);						*/						/*for(var ind:int = 0; ind < itemGrid.length ; ind++)			{				if(itemGrid[ind])				{					var stone_col:int = col + ind%Math.sqrt(itemGrid.length);					var stone_row = row + Math.floor(ind/Math.sqrt(itemGrid.length));									stone = new Crop(this, stone_col, stone_row);					buildingContent.push(stone);				}			}*/		}						override public function update()		{			super.update();						for(var ind:int = 0; ind < quarry.buildingContent.length ; ind++)			{								var stone:QuarryStone = quarry.buildingContent[ind];								if(stone.level < GameData.STONE_RESPAWN_TIME)				{					// do nothing								}								else if(stone.beingWorked) // stone being worked				{					// do nothing				}				else if(stone.worker) // stone has a worker (but not being worked)				{					if(stone.worker.col == cache_col && stone.worker.row == cache_row && stone.worker.isIdle()) // the minion is ready in the stonefield location					{						stone.startWork();					}					else if(!stone.worker.targetPosition) // the minion isn't on the way (and not in the quarry location)					{						if(stone.worker.ghostMode) // already assigned to this building probably						{							stone.worker.targetPosition = {col: cache_col, row: cache_row};						}						else if (stone.worker.col == rally_col && stone.worker.row == rally_row) // just got to the rally point after being attached to this stonefield						{							stone.worker.ghostMode = true;							stone.worker.targetPosition = {col: cache_col, row: cache_row};						}						else						{							stone.worker.targetPosition = {col: rally_col, row: rally_row};						}												stone.worker.update();					}				}				else if(workers.length > 1) // we have some minions to work the field				{					trace("we have workers");					for(var minion_ind:int = 0; minion_ind < workers.length; minion_ind++) // loop through the workers					{						var curr_minion:Minion = workers[minion_ind];						if(curr_minion.isIdle()) // found an available worker						{							trace("assigning");							stone.worker = curr_minion;							stone.parent_mill = this;							update();							break;						}											}				}			}		}				public function stoneHarvested()		{			resource = resource + GameData.STONE_AMOUNT;			gameScreen.pickupQuery(this)		}	}}